#! bin/bash

# Andy Horn
# server
# 05/10/2019

# This file will run on bootup to allow the Pi to enter a pairing mode where the user
# can use our HubConnect utility to send a file via Bluetooth containing a Wi-Fi
# SSID and Passkey. If the Pi detects a file download, it will run the necessary scripts
# to parse the file and update the wpa_supplicant.conf file. It will print the wlan status
# at the end of the process. The whole thing should only take three minutes to complete.

# Once this script has run and the Pi has connected to Wi-Fi, then our main sensor polling
# script can be run to send sensor data to our servers.

DOWNLOAD_FILE="./bluetooth/temp.txt"
DOWNLOAD_DIR="./bluetooth"
CONFIG_FILE="./config/config.txt"
CONFIG_DIR="./config"

OBEX=$(ps -e | grep obex)			# look to see if any obex processes are currently running

if [[ -z "$OBEX" ]]; then
	echo "Obex server not running, starting process..."
	rm -f $DOWNLOAD_FILE			# clear the download directory to prevent errors
	$(sudo obexpushd -B -o $DOWNLOAD_DIR)	# start a background obex server process
	sudo hciconfig hci0 piscan &		# turn bluetooth on
	OBEX=$(ps -e | grep obex)		# look to see if it is running
	if [[ ! -z "$OBEX" ]]; then echo "Successfully started!"; fi
fi

echo "Entering pairing mode..."
sleep 120 # sleep for 120 seconds (2 minutes) to allow the server to download the new file
echo "Pairing mode completed"

bash kill_obex				# after 2 minutes, kill the background process

if [[ -f "$DOWNLOAD_FILE" ]]; then
	# if a new file exists

	mv -f  $DOWNLOAD_FILE $CONFIG_FILE 	# move the file to the config directory
	bash update_config			# run the update script to install the new ssid and psk
fi

sleep 30	# sleep for 30 seconds to allow the Pi to connect to the wifi network

ifconfig wlan0	# print the wireless connection status


